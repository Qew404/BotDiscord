using Discord;
using Discord.WebSocket;
using System.Collections.Concurrent;

public class SecurityManager
{
    // Discord –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
    private readonly DiscordSocketClient _client;
    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private readonly ConcurrentDictionary<ulong, UserWarning> _warnings;
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–∞–Ω–∞
    private const int MAX_WARNINGS = 2;
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞
    private const int MESSAGE_THRESHOLD = 5;
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞
    private const int TIME_WINDOW_SECONDS = 5;

    public SecurityManager(DiscordSocketClient client)
    {
        _client = client;
        _warnings = new ConcurrentDictionary<ulong, UserWarning>();
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        _client.UserJoined += HandleNewUser;
        _client.MessageReceived += HandleMessage;
    }

    private async Task<bool> AnalyzeNewUser(SocketGuildUser user)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
        var accountAge = DateTimeOffset.UtcNow - user.CreatedAt;
        if (accountAge.TotalDays < 7) return true;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if (user.Username.Contains("bot", StringComparison.OrdinalIgnoreCase) ||
            user.Username.Contains("spam", StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task HandleNewUser(SocketGuildUser user)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        bool isSupicious = await AnalyzeNewUser(user);
        
        if (isSupicious)
        {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await RequestVerification(user);
            // –î–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å "–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            var unverifiedRole = user.Guild.Roles.FirstOrDefault(r => r.Name == "Not verified");
            if (unverifiedRole != null)
                await user.AddRoleAsync(unverifiedRole);
        }
    }

    private async Task SendWarning(SocketGuildUser user, string message)
    {
        try
        {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await user.SendMessageAsync($"‚ö†Ô∏è {message}");
        }
        catch (Exception ex)
        {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            Console.WriteLine($"Couldn't send a warning to the user {user.Username}: {ex.Message}");
        
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª
            var channel = user.Guild.DefaultChannel;
            if (channel != null)
            {
                await channel.SendMessageAsync($"{user.Mention} ‚ö†Ô∏è {message}");
            }
        }
    }

    private async Task RequestVerification(SocketGuildUser user)
    {
        // –°–æ–∑–¥–∞–µ–º embed —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        var verifyEmbed = new EmbedBuilder()
            .WithTitle("üîí Account Confirmation")
            .WithDescription("To confirm that you are not a bot, click on the button below")
            .WithColor(Color.Orange)
            .Build();

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        var button = new ComponentBuilder()
            .WithButton("I'm not a bot", "verify-button", ButtonStyle.Success)
            .Build();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await user.SendMessageAsync(embed: verifyEmbed, components: button);
    }

    private bool IsSpamming(SocketMessage message)
    {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var warning = _warnings.GetOrAdd(message.Author.Id, new UserWarning());
        warning.RecentMessages.Add(DateTime.UtcNow);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–∫–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
        warning.RecentMessages.RemoveAll(x => (DateTime.UtcNow - x).TotalSeconds > TIME_WINDOW_SECONDS);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ø–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
        return warning.RecentMessages.Count >= MESSAGE_THRESHOLD;
    }

    private async Task<bool> DetectScam(string content)
    {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        string[] scamWords = { "free nitro", "steam gift", "free discord", "giveaway", "claim now" };
        return scamWords.Any(word => content.ToLower().Contains(word));
    }

    private async Task HandleMessage(SocketMessage message)
    {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if (message.Author.IsBot) return;

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        var user = message.Author as SocketGuildUser;
        if (user == null) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
        if (IsSpamming(message))
        {
            await WarnUser(user, "spam");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
        if (await DetectScam(message.Content))
        {
            await WarnUser(user, "fraud");
        }
    }

    private async Task WarnUser(SocketGuildUser user, string reason)
    {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var warning = _warnings.GetOrAdd(user.Id, new UserWarning());
        warning.Count++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        if (warning.Count >= MAX_WARNINGS)
        {
            // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            warning.BanDate = DateTime.UtcNow;
            await user.BanAsync(reason: $"The warning limit has been exceeded: {reason}");
            await user.SendMessageAsync("You have been banned for violating the server rules");
        }
        else
        {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await SendWarning(user, $"Warning {warning.Count}/{MAX_WARNINGS}: Violation - {reason}");
        }
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
public class UserWarning
{
    public int Count { get; set; }
    public DateTime LastWarning { get; set; }
    public DateTime? BanDate { get; set; }
    public List<DateTime> RecentMessages { get; set; } = new List<DateTime>();
}