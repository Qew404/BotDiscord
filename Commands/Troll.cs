using Discord.WebSocket;

namespace DBot.Commands
{
    public class Troll
    {
        // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        private static readonly List<string> Messages = new()
        {
            "I won't bark",
            "I won't bark, I'm NOT A DOG!",
            "Did you want to be banned?!",
            "Where is my resignation letter‚Ä¶",
            "Stupid button‚Ä¶ WHO INVENTED IT?",
        };

        // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        private static readonly HashSet<string> UsedMessages = new();
        // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–Ω–∞
        private static bool isSleeping = false;
        // –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞
        private static int sleepMessageCount = 0;
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞
        private static readonly int maxSleepMessages = 4;

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞
        public static void WakeUp()
        {
            isSleeping = false;
            sleepMessageCount = 0;
            UsedMessages.Clear();
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        public static async Task Execute(SocketMessage message)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–ø–∏—Ç –ª–∏ –±–æ—Ç
            if (isSleeping)
            {
                sleepMessageCount++;
                if (sleepMessageCount >= maxSleepMessages)
                {
                    WakeUp();
                    return;
                }
                await message.Channel.SendMessageAsync("I'm sleeping...üò¥");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∏ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (UsedMessages.Count >= Messages.Count)
            {
                await message.Channel.SendMessageAsync("That's it! I'm tired! She went to sleep...üò¥");
                isSleeping = true;
                UsedMessages.Clear();
                return;
            }

            // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            string randomMessage;
            do
            {
                var random = new Random();
                randomMessage = Messages[random.Next(Messages.Count)];
            } while (UsedMessages.Contains(randomMessage));

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
            UsedMessages.Add(randomMessage);
            await message.Channel.SendMessageAsync(randomMessage);
        }
    }
}